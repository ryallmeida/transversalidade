# -*- coding: utf-8 -*-
"""transversalidade_loa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1el_rVJ9BEHyGgu9NHbEYrmvN5cpZ5GlL

## **PR√â-PROCESSAMENTO DE DADOS**

---
"""



"""## **LINEAR SVC**

---


"""

import pandas as pd
import numpy as np

# Leitura do corpus e limpeza
df_corpus_linear_svc = pd.read_csv("/content/loa2_balanceado_preprocessado.csv")
df_corpus_svm_sem_na = df_corpus_linear_svc.dropna()

# Extra√ß√£o de textos e r√≥tulos
textos_svm = list(df_corpus_svm_sem_na['paragrafo'].values)
labels_svm = df_corpus_svm_sem_na['label_final'].values

# Vetoriza√ß√£o com TF-IDF
from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer_svm = TfidfVectorizer()
X_svm_tfidf = tfidf_vectorizer_svm.fit_transform(textos_svm)

# Separa√ß√£o dos dados em treino e teste
from sklearn.model_selection import train_test_split
X_svm_train, X_svm_test, y_svm_train, y_svm_test = train_test_split(
    X_svm_tfidf,
    labels_svm,
    test_size=0.25,
    random_state=0
)

# Treinamento do modelo SVM
from sklearn.svm import LinearSVC
clf_svm = LinearSVC()
clf_svm.fit(X_svm_train, y_svm_train)

# Predi√ß√£o e avalia√ß√£o
from sklearn.metrics import classification_report
y_svm_pred = clf_svm.predict(X_svm_test)

print(classification_report(
    y_svm_test,
    y_svm_pred,
    target_names=["Positive", "Neutral", "Negative"]
))

from sklearn.svm import LinearSVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.preprocessing import label_binarize
from sklearn.calibration import CalibratedClassifierCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
from itertools import cycle
import numpy as np

# Binariza as labels para avalia√ß√£o multiclasse
y_bin = label_binarize(labels_svm, classes=np.unique(labels_svm))
n_classes = y_bin.shape[1]

# Usa stratify para manter propor√ß√£o das classes
X_train, X_test, y_train, y_test = train_test_split(X_svm_tfidf,
                                                    labels_svm,
                                                    test_size=0.2,
                                                    random_state=42,
                                                    stratify=labels_svm)

# Binariza o y_test (usado na avalia√ß√£o ROC)
y_test_bin = label_binarize(y_test, classes=np.unique(labels_svm))

# Cria um modelo LinearSVC calibrado (com o nome do par√¢metro correto para vers√µes < 1.1)
base_svc = LinearSVC(max_iter=10000)
calibrated_svc = CalibratedClassifierCV(estimator=base_svc,
                                        method='sigmoid',
                                        cv=3)

# One-vs-Rest com SVC calibrado
clf_svc = OneVsRestClassifier(calibrated_svc)
clf_svc.fit(X_train, y_train)

# Previs√µes em forma de probabilidade
y_score = clf_svc.predict_proba(X_test)

# Calcula curva ROC e AUC para cada classe
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(n_classes):
    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_score[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# Gr√°fico ROC
colors = cycle(['aqua', 'darkorange', 'cornflowerblue'])
plt.figure(figsize=(8, 6))
for i, color in zip(range(n_classes), colors):
    plt.plot(fpr[i], tpr[i], color=color, lw=2,
             label=f'Classe {np.unique(labels_svm)[i]} (AUC = {roc_auc[i]:0.2f})')

plt.plot([0, 1], [0, 1], 'k--', lw=2)
plt.xlabel('Taxa de Falsos Positivos')
plt.ylabel('Taxa de Verdadeiros Positivos')
plt.title('Curva ROC - One-vs-Rest com LinearSVC (Calibrado)')
plt.legend(loc='lower right')
plt.grid(True)
plt.tight_layout()
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Gera as previs√µes do modelo treinado
y_pred = clf_svc.predict(X_test)

# Gera a matriz de confus√£o
cm = confusion_matrix(y_test, y_pred)

# Cria o display da matriz de confus√£o
disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                              display_labels=np.unique(labels_svm))

# Plota a matriz de confus√£o
plt.figure(figsize=(6, 5))
disp.plot(cmap=plt.cm.Blues, values_format='d')
plt.title("Matriz de Confus√£o - OneVsRest com LinearSVC Calibrado")
plt.xlabel("Classe Predita")
plt.ylabel("Classe Real")
plt.grid(False)
plt.tight_layout()
plt.show()

"""## *ALGORITMO NAIVE BAYES*"""

import pandas as pd
import numpy as np
import psutil
import os
import time

# --- Fun√ß√£o auxiliar para mostrar uso de mem√≥ria ---
def mostrar_uso_memoria():
    processo = psutil.Process(os.getpid())
    mem = processo.memory_info().rss / (1024 ** 2)  # em MB
    print(f"[INFO] Uso atual de mem√≥ria RAM: {mem:.2f} MB")

print("[ETAPA 1] Lendo o corpus...")
df_corpus = pd.read_csv("/content/loa2_balanceado_preprocessado.csv")
mostrar_uso_memoria()

# Verifica colunas
print("[INFO] Colunas do corpus:", df_corpus.columns.tolist())

print("[ETAPA 2] Removendo entradas com dados faltantes...")
df_corpus = df_corpus.dropna(subset=["paragrafo", "label_final"])
mostrar_uso_memoria()

# Separa√ß√£o de vari√°veis
textos = df_corpus["paragrafo"].values
labels = df_corpus["label_final"].values
print(f"[INFO] Total de amostras ap√≥s limpeza: {len(textos)}")

# Vetoriza√ß√£o com CountVectorizer
print("[ETAPA 3] Vetorizando os textos com CountVectorizer...")
from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(textos)
mostrar_uso_memoria()

# C√°lculo da esparsidade
total_elementos = X.shape[0] * X.shape[1]
elementos_nao_zero = X.nnz
esparcidade = 1.0 - (elementos_nao_zero / total_elementos)
print(f"[INFO] Esparsidade da matriz: {esparcidade:.4f} (valores pr√≥ximos de 1 indicam muitos zeros)")

# Divis√£o treino/teste
from sklearn.model_selection import train_test_split
print("[ETAPA 4] Separando dados de treino e teste...")
X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.25, random_state=42, stratify=labels)
mostrar_uso_memoria()

# Treinamento do modelo
from sklearn.naive_bayes import MultinomialNB
print("[ETAPA 5] Treinando o classificador Multinomial Naive Bayes...")
modelo_nb = MultinomialNB()
modelo_nb.fit(X_train, y_train)

# Avalia√ß√£o
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
print("[ETAPA 6] Avaliando o modelo...")
y_pred = modelo_nb.predict(X_test)
print("\n[RESULTADO] Relat√≥rio de Classifica√ß√£o:")
print(classification_report(y_test, y_pred, target_names=["Positive", "Neutral", "Negative"]))

# Matriz de Confus√£o
print("[ETAPA 7] Gerando matriz de confus√£o...")
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Positive", "Neutral", "Negative"])
disp.plot(cmap="Blues")
mostrar_uso_memoria()

# Curvas ROC
print("[ETAPA 8] Calculando curva ROC...")
from sklearn.preprocessing import label_binarize
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
from itertools import cycle

# Binariza as classes
classes_unicas = np.unique(labels)
y_test_bin = label_binarize(y_test, classes=classes_unicas)
y_prob = modelo_nb.predict_proba(X_test)

plt.figure(figsize=(8, 6))
colors = cycle(['aqua', 'darkorange', 'cornflowerblue'])

for i, color in zip(range(len(classes_unicas)), colors):
    fpr, tpr, _ = roc_curve(y_test_bin[:, i], y_prob[:, i])
    roc_auc = auc(fpr, tpr)
    plt.plot(fpr, tpr, color=color, lw=2, label=f'Classe {classes_unicas[i]} (AUC = {roc_auc:.2f})')

plt.plot([0, 1], [0, 1], 'k--', lw=2)
plt.title('Curva ROC - MultinomialNB com CountVectorizer')
plt.xlabel('Taxa de Falsos Positivos')
plt.ylabel('Taxa de Verdadeiros Positivos')
plt.legend(loc='lower right')
plt.grid(True)
plt.tight_layout()
plt.show()



import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# 1. üîπ Carregamento dos dados
df = pd.read_csv("/content/loa2_balanceado_preprocessado.csv").dropna()
textos = df["paragrafo"] # Changed 'texto' to 'paragrafo'
rotulos = df["label_final"]

# 2. üîπ Separa√ß√£o treino-teste
X_train, X_test, y_train, y_test = train_test_split(textos, rotulos, test_size=0.2, stratify=rotulos, random_state=42)

# 3. üîπ Vetoriza√ß√£o aprimorada
vectorizer = CountVectorizer(
    ngram_range=(1, 2),       # unigrama e bigrama
    max_df=0.85,              # remove palavras muito frequentes
    min_df=5,                 # remove palavras muito raras
    # Removed stop_words='english' as the text seems to be in Portuguese
)

# 4. üîπ Modelos a serem avaliados
modelos = {
    "MultinomialNB": MultinomialNB(),
    "LinearSVC": LinearSVC(),
    "LogisticRegression": LogisticRegression(max_iter=1000)
}

# 5. üîπ Pipeline para GridSearch do MultinomialNB
pipe_nb = Pipeline([
    ('vect', vectorizer),
    ('nb', MultinomialNB())
])

param_grid_nb = {
    'nb__alpha': [0.001, 0.01, 0.1, 0.5, 1.0]
}

grid_nb = GridSearchCV(pipe_nb, param_grid_nb, cv=5, scoring='f1_macro')
grid_nb.fit(X_train, y_train)

print("[INFO] Melhor alpha para NB:", grid_nb.best_params_)
print("[INFO] Melhor f1_macro (CV):", grid_nb.best_score_)

# 6. üîπ Avalia√ß√£o final dos 3 modelos
for nome, modelo in modelos.items():
    print(f"\nüîç Avaliando modelo: {nome}")
    pipe = Pipeline([
        ('vect', vectorizer),
        ('clf', modelo)
    ])
    pipe.fit(X_train, y_train)
    y_pred = pipe.predict(X_test)

    print(classification_report(y_test, y_pred))

    # Matriz de confus√£o
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=pipe.classes_, yticklabels=pipe.classes_)
    plt.title(f'Matriz de Confus√£o - {nome}')
    plt.xlabel('Predito')
    plt.ylabel('Real')
    plt.tight_layout()
    plt.show()

    # Valida√ß√£o cruzada
    scores = cross_val_score(pipe, textos, rotulos, cv=5, scoring='f1_macro')
    print(f"[INFO] F1 Macro m√©dio (CV): {scores.mean():.4f}")

"""## **MODELAGEM COM O ALGOTIRMO SGD CLASSIFIER**

---


"""

!python -m spacy download pt_core_news_sm

import os
import numpy as np
import pandas as pd
import spacy
import psutil
import glob
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import classification_report
from sklearn.utils.multiclass import unique_labels

# ---------- CONFIGURA√á√ïES ----------
CAMINHO_CSV = '/content/corpus_preprocessado_loa.csv'
PASTA_LOTES = 'lotes_limpos'
TAMANHO_LOTE = 1000

# ---------- VER USO DE RAM ----------
def mostrar_uso_de_ram():
    uso = psutil.virtual_memory().used / 1024**3
    print(f"[INFO] RAM usada: {uso:.2f} GB")

# ---------- PREPROCESSAMENTO SEM LEMATIZA√á√ÉO ----------
# Apenas remove stopwords e mant√©m palavras com letras
spacy.cli.download("pt_core_news_sm")
nlp = spacy.load("pt_core_news_sm")

def limpar_em_lotes(textos, tamanho_lote=1000, pasta='lotes_limpos'):
    os.makedirs(pasta, exist_ok=True)
    textos = list(map(str, textos))

    for i in range(0, len(textos), tamanho_lote):
        print(f"[INFO] Processando lote {i} at√© {i + tamanho_lote}")
        lote = textos[i:i + tamanho_lote]
        docs = list(nlp.pipe(lote))
        textos_limpos = [
            ' '.join([token.text.lower() for token in doc if not token.is_stop and token.is_alpha])
            for doc in docs
        ]
        np.save(f'{pasta}/lote_{i}.npy', np.array(textos_limpos))
        mostrar_uso_de_ram()

# ---------- ETAPA 1: Carrega CSV e limpa por lote ----------
df = pd.read_csv('/content/corpus_preprocessado_loa.csv').dropna()
X_raw = df['paragrafo'].values
y = df['label_final'].values

# Salva r√≥tulos (n√£o muda entre lotes)
np.save('y_labels.npy', y)

# Executa a limpeza e salva os lotes
limpar_em_lotes(X_raw, tamanho_lote=TAMANHO_LOTE, pasta=PASTA_LOTES)

# ---------- ETAPA 2: Junta todos os lotes e os r√≥tulos ----------
arquivos_lotes = sorted(glob.glob(f'{PASTA_LOTES}/lote_*.npy'))
X = np.concatenate([np.load(f) for f in arquivos_lotes])
y = np.load('y_labels.npy')

# ---------- ETAPA 3: Divide e treina ----------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y
)

pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(
        lowercase=True,
        stop_words='portuguese',   # sem spaCy, usa stopwords do scikit
        max_df=0.8,
        min_df=10,
        max_features=10000,
        ngram_range=(1, 1)
    )),
    ('clf', SGDClassifier(
        loss='hinge',
        penalty='l2',
        alpha=1e-4,
        max_iter=1000,
        tol=1e-3,
        random_state=42,
        class_weight='balanced'
    ))
])

print("[INFO] Treinando modelo...")
pipeline.fit(X_train, y_train)
print("[INFO] Modelo treinado.")

# ---------- ETAPA 4: Avalia√ß√£o ----------
y_pred = pipeline.predict(X_test)
labels = sorted(unique_labels(y_test, y_pred))
print(classification_report(y_test, y_pred, labels=labels, target_names=["Negative", "Neutral", "Positive"]))

import os
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import classification_report
from sklearn.utils import shuffle
import psutil
import joblib

# Fun√ß√£o para monitorar o uso de RAM
def print_ram_usage(msg=""):
    ram = psutil.virtual_memory()
    used = round((ram.total - ram.available) / (1024 ** 3), 2)
    total = round(ram.total / (1024 ** 3), 2)
    print(f"{msg} RAM usada: {used} GB / {total} GB")

# Caminhos
lotes_path = "/content/lotes_limpos"
labels_path = "/content/y_labels.npy"

# Carrega os r√≥tulos completos
print("Carregando r√≥tulos...")
y_all = np.load(labels_path)
print_ram_usage("[Ap√≥s carregar y]")

# Carrega todos os lotes de texto
print("Carregando todos os lotes...")
textos = []
for arquivo in sorted(os.listdir(lotes_path)):
    caminho_arquivo = os.path.join(lotes_path, arquivo)
    # Correctly load the numpy array instead of reading as text
    textos.extend(np.load(caminho_arquivo, allow_pickle=True))


# Garante que os textos e r√≥tulos estejam sincronizados
assert len(textos) == len(y_all), "Quantidade de textos e r√≥tulos n√£o bate!"

# The original code was creating a DataFrame and shuffling here,
# but the subsequent cells handle splitting and shuffling by index.
# We will proceed directly to splitting the data.

# Separa√ß√£o treino/teste
# Assuming X is the concatenated texts and y is y_all
X = np.array(textos) # Convert list to numpy array for consistent splitting
X_train, X_test, y_train, y_test = train_test_split(
    X, y_all, test_size=0.2, random_state=42, stratify=y_all
)
print(f"\nSepara√ß√£o treino/teste: {len(X_train)} / {len(X_test)}")
print_ram_usage("[Ap√≥s separar treino/teste]")

# Vetorizador TF-IDF
print("Ajustando vocabul√°rio do TF-IDF com dados de treino...")
vectorizer = TfidfVectorizer(max_features=30000)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)
print_ram_usage("[Ap√≥s ajustar vocabul√°rio]")

# Classificador com SGD
print("Treinando modelo com SGDClassifier...")
clf = SGDClassifier(loss="log_loss", max_iter=1000, tol=1e-3, random_state=42)
clf.fit(X_train_vec, y_train)
print_ram_usage("[Ap√≥s treinamento do modelo]")

# Avalia√ß√£o
print("\nAvalia√ß√£o no conjunto de teste:")
y_pred = clf.predict(X_test_vec)
print(classification_report(y_test, y_pred, target_names=["Negative", "Neutral", "Positive"]))

# Salvar modelo e vetorizador
joblib.dump(clf, "/content/modelo_balanceado.pkl")
joblib.dump(vectorizer, "/content/vectorizer_balanceado.pkl")

import os
import numpy as np
import psutil
import joblib
import time
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import classification_report
from sklearn.utils.class_weight import compute_class_weight

# Utilit√°rio para mostrar uso de RAM
def mostrar_uso_ram(msg=""):
    ram = psutil.virtual_memory()
    print(f"[{msg}] RAM usada: {round((ram.total - ram.available) / (1024 ** 3), 2)} GB / {round(ram.total / (1024 ** 3), 2)} GB")

# Caminhos
caminho_lotes = '/content/lotes_limpos'
caminho_y = '/content/y_labels.npy'

print("üîÑ Carregando r√≥tulos completos...")
y = np.load(caminho_y)
mostrar_uso_ram("Ap√≥s carregar y")

# Organiza os lotes
print("üì¶ Listando lotes de texto...")
lotes = sorted([os.path.join(caminho_lotes, f) for f in os.listdir(caminho_lotes) if f.endswith('.npy')])
n_lotes = len(lotes)
print(f"‚úÖ Total de lotes encontrados: {n_lotes}")
mostrar_uso_ram("Ap√≥s listar lotes")

# Separa√ß√£o treino/teste
print("üß™ Separando treino e teste (80% treino, 20% teste)...")
idx_treino, idx_teste = train_test_split(np.arange(len(y)), test_size=0.2, stratify=y, random_state=42)
print(f"Treino: {len(idx_treino)} amostras | Teste: {len(idx_teste)} amostras")
mostrar_uso_ram("Ap√≥s separar treino/teste")

# Vetorizador e classificador
print("üß† Inicializando vetorizador e modelo...")
vectorizer = TfidfVectorizer(lowercase=True, max_df=0.9, min_df=5, ngram_range=(1, 2))
# Initialize SGDClassifier without class_weight initially for partial_fit
clf = SGDClassifier(loss='hinge', penalty='l2', alpha=1e-4, max_iter=1000, tol=1e-3, random_state=42)


# Fit do vetorizador com os dados de treino
print("üìö Aprendendo vocabul√°rio com dados de treino...")
corpus_treino = []
for i, lote_path in enumerate(lotes):
    print(f"  ‚û§ Lendo lote {i+1}/{n_lotes} para vetoriza√ß√£o...")
    X_lote = np.load(lote_path, allow_pickle=True)
    idx_global = np.arange(i * len(X_lote), (i + 1) * len(X_lote))
    idx_local = np.intersect1d(idx_global, idx_treino)

    if len(idx_local) > 0:
        X_treino_lote = X_lote[idx_local - i * len(X_lote)]
        corpus_treino.extend(X_treino_lote)

vectorizer.fit(corpus_treino)
print("‚úÖ Vetorizador ajustado.")
mostrar_uso_ram("Ap√≥s vetoriza√ß√£o")
# del corpus_treino  # libera mem√≥ria - keep for computing class weights


# Compute class weights for the training data
print("‚öñÔ∏è Calculando pesos das classes para dados de treino...")
classes = np.unique(y[idx_treino]) # Use classes from the training set
class_weights = compute_class_weight('balanced', classes=classes, y=y[idx_treino])
class_weight_dict = dict(zip(classes, class_weights))
print(f"Pesos das classes: {class_weight_dict}")
mostrar_uso_ram("Ap√≥s calcular pesos das classes")

# Treinamento do classificador por lotes
print("üöÄ Iniciando treinamento incremental com partial_fit...")
clf_initialized = False

for i, lote_path in enumerate(lotes):
    print(f"üì¶ Treinando com lote {i+1}/{n_lotes}...")
    X_lote = np.load(lote_path, allow_pickle=True)
    inicio = i * len(X_lote)
    fim = inicio + len(X_lote)
    idx_lote_global = np.arange(inicio, fim)
    idx_local_treino = np.intersect1d(idx_lote_global, idx_treino)

    if len(idx_local_treino) == 0:
        continue

    X_batch = X_lote[idx_local_treino - inicio]
    y_batch = y[idx_local_treino]
    X_batch_vec = vectorizer.transform(X_batch)

    # Use the computed class weights in partial_fit
    if not clf_initialized:
        clf.partial_fit(X_batch_vec, y_batch, classes=classes)
        clf_initialized = True
    else:
        clf.partial_fit(X_batch_vec, y_batch)

    mostrar_uso_ram(f"Ap√≥s treino do lote {i+1}")

print("‚úÖ Treinamento completo.")

# Prepara√ß√£o dos dados de teste
print("\nüîç Preparando dados de teste...")
X_teste = []
y_teste = []

for i, lote_path in enumerate(lotes):
    X_lote = np.load(lote_path, allow_pickle=True)
    inicio = i * len(X_lote)
    fim = inicio + len(X_lote)
    idx_lote_global = np.arange(inicio, fim)
    idx_local_teste = np.intersect1d(idx_lote_global, idx_teste)

    if len(idx_local_teste) == 0:
        continue

    X_batch = X_lote[idx_local_teste - inicio]
    y_batch = y[idx_local_teste]
    X_teste.extend(X_batch)
    y_teste.extend(y_batch)

mostrar_uso_ram("Ap√≥s preparar dados de teste")

# Avalia√ß√£o
print("üìä Avaliando modelo...")
X_teste_vec = vectorizer.transform(X_teste)
y_pred = clf.predict(X_teste_vec)
print("‚úÖ Avalia√ß√£o conclu√≠da.\n")
# Adjust target_names to match the actual classes in your dataset
print(classification_report(y_teste, y_pred, target_names=[str(c) for c in classes]))

import os
import numpy as np
import psutil
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.utils.class_weight import compute_class_weight # Import compute_class_weight
import glob

def mostrar_uso_ram(msg=""):
    ram = psutil.virtual_memory()
    print(f"[{msg}] RAM usada: {round((ram.total - ram.available) / (1024 ** 3), 2)} GB / {round(ram.total / (1024 ** 3), 2)} GB")

# Caminhos
caminho_lotes = '/content/lotes_limpos' # Corrected path
caminho_y = '/content/y_labels.npy'

if not os.path.exists(caminho_y):
    raise FileNotFoundError(f"O arquivo de r√≥tulos n√£o foi encontrado em: {caminho_y}")

print("Carregando r√≥tulos...")
y = np.load(caminho_y)
mostrar_uso_ram("Ap√≥s carregar y")

# Lista lotes, embaralha para evitar ordem sequencial
lotes = sorted(glob.glob(os.path.join(caminho_lotes, '*.npy')))
np.random.shuffle(lotes)
print(f" Total de lotes encontrados: {len(lotes)}")

# Calculate total number of samples and determine batch sizes
total_samples = len(y)
batch_sizes = []
for lote_path in lotes:
    arr = np.load(lote_path, allow_pickle=True)
    batch_sizes.append(len(arr))

if total_samples != sum(batch_sizes):
    print(f"[WARNING] Total samples in y ({total_samples}) does not match sum of batch sizes ({sum(batch_sizes)}). Proceeding, but this might cause issues.")


# Separa treino e teste por √≠ndice global
indices = np.arange(total_samples)
idx_treino, idx_teste = train_test_split(indices, test_size=0.2, stratify=y, random_state=42)

print(f"Separa√ß√£o treino/teste: {len(idx_treino)} / {len(idx_teste)}")
mostrar_uso_ram("Ap√≥s separar treino/teste")

# Inicializa vetorizador e classificador
vectorizer = TfidfVectorizer(lowercase=True, max_df=0.9, min_df=5, ngram_range=(1, 2))
# Remove class_weight='balanced' from initialization
clf = SGDClassifier(loss='log_loss', penalty='l2', alpha=1e-4, max_iter=1000, tol=1e-3,
                    random_state=42)

# Adjusts the vectorizer with all the training data
print("Ajustando vocabul√°rio do TF-IDF com todos os dados de treino...")
corpus_treino = []
global_idx_offset = 0
for i, lote_path in enumerate(lotes):
    X_lote = np.load(lote_path, allow_pickle=True)
    current_batch_size = len(X_lote)
    indices_lote_global = np.arange(global_idx_offset, global_idx_offset + current_batch_size)
    mask = np.isin(indices_lote_global, idx_treino)
    if np.any(mask):
        corpus_treino.extend(X_lote[mask])
    global_idx_offset += current_batch_size

vectorizer.fit(corpus_treino)
mostrar_uso_ram("Ap√≥s ajustar vocabul√°rio")
del corpus_treino

# Compute class weights based on the full training set
print("Calculando pesos das classes para dados de treino...")
classes = np.unique(y[idx_treino]) # Use classes from the training set
class_weights = compute_class_weight('balanced', classes=classes, y=y[idx_treino])
class_weight_dict = dict(zip(classes, class_weights))
print(f"Pesos das classes: {class_weight_dict}")
mostrar_uso_ram("Ap√≥s calcular pesos das classes")


# Treinamento incremental
print(" Iniciando treinamento incremental...")
clf_initialized = False
global_idx_offset = 0

for i, lote_path in enumerate(lotes):
    print(f" Treinando lote {i+1} / {len(lotes)}...")
    X_lote = np.load(lote_path, allow_pickle=True)
    current_batch_size = len(X_lote)
    indices_lote_global = np.arange(global_idx_offset, global_idx_offset + current_batch_size)

    mask_treino = np.isin(indices_lote_global, idx_treino)
    if not np.any(mask_treino):
        print("   Nenhum dado de treino nesse lote, pulando.")
        global_idx_offset += current_batch_size
        continue

    X_batch = X_lote[mask_treino]
    y_batch = y[indices_lote_global[mask_treino]] # Use global indices filtered by mask

    X_vec = vectorizer.transform(X_batch)

    # Pass class_weight_dict to partial_fit
    if not clf_initialized:
        clf.partial_fit(X_vec, y_batch, classes=classes, sample_weight=np.array([class_weight_dict[label] for label in y_batch]))
        clf_initialized = True
    else:
        clf.partial_fit(X_vec, y_batch, sample_weight=np.array([class_weight_dict[label] for label in y_batch]))

    mostrar_uso_ram(f"Ap√≥s treino do lote {i+1}")
    global_idx_offset += current_batch_size


# Avalia√ß√£o
print("\n Preparando dados de teste para avalia√ß√£o...")
X_teste = []
y_teste = []
global_idx_offset = 0

for i, lote_path in enumerate(lotes):
    X_lote = np.load(lote_path, allow_pickle=True)
    current_batch_size = len(X_lote)
    indices_lote_global = np.arange(global_idx_offset, global_idx_offset + current_batch_size)

    mask_teste = np.isin(indices_lote_global, idx_teste)
    if not np.any(mask_teste):
        global_idx_offset += current_batch_size
        continue

    X_teste.extend(X_lote[mask_teste])
    y_teste.extend(y[indices_lote_global[mask_teste]]) # Use global indices filtered by mask

    global_idx_offset += current_batch_size


mostrar_uso_ram("Ap√≥s preparar dados de teste")

print(" Avaliando modelo final...")
X_teste_vec = vectorizer.transform(X_teste)
y_pred = clf.predict(X_teste_vec)

print(classification_report(y_teste, y_pred, target_names=["Negative", "Neutral", "Positive"]))

import os
import numpy as np
import psutil
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.utils.class_weight import compute_class_weight
import glob

def mostrar_uso_ram(msg=""):
    ram = psutil.virtual_memory()
    print(f"[{msg}] RAM usada: {round((ram.total - ram.available) / (1024 ** 3), 2)} GB / {round(ram.total / (1024 ** 3), 2)} GB")

# Caminhos
caminho_lotes = '/content/lotes_limpos'
caminho_y = '/content/y_labels.npy'

if not os.path.exists(caminho_y):
    raise FileNotFoundError(f"O arquivo de r√≥tulos n√£o foi encontrado em: {caminho_y}")

print("üîÑ Carregando r√≥tulos...")
y = np.load(caminho_y)
mostrar_uso_ram("Ap√≥s carregar y")

# Lista lotes e embaralha para evitar vi√©s de ordem
lotes = sorted(glob.glob(os.path.join(caminho_lotes, '*.npy')))
np.random.shuffle(lotes)
print(f"üî¢ Total de lotes encontrados: {len(lotes)}")

# Descobre tamanho fixo do lote
tamanho_lote = None
for lote_path in lotes:
    arr = np.load(lote_path, allow_pickle=True)
    tamanho_lote = len(arr)
    break
if tamanho_lote is None:
    raise RuntimeError("Nenhum lote encontrado ou lotes vazios.")

# Separa √≠ndices globais treino/teste
indices = np.arange(len(y))
idx_treino, idx_teste = train_test_split(indices, test_size=0.2, stratify=y, random_state=42)

print(f"üß™ Separa√ß√£o treino/teste: {len(idx_treino)} / {len(idx_teste)}")
mostrar_uso_ram("Ap√≥s separar treino/teste")

# Inicializa vetorizador TF-IDF (mais amplo)
vectorizer = TfidfVectorizer(
    lowercase=True,
    max_df=0.95,
    min_df=3,
    ngram_range=(1, 3),
    max_features=30000
)

# Inicializa classificador SGD com early stopping (sem class_weight)
clf = SGDClassifier(
    loss='modified_huber',
    max_iter=5000,
    tol=1e-4,
    early_stopping=True,
    validation_fraction=0.1,
    n_iter_no_change=10,
    random_state=42
)

# Ajuste do vocabul√°rio com todo o corpus de treino
print("üìö Ajustando vocabul√°rio do TF-IDF com todos os dados de treino...")
corpus_treino = []
for i, lote_path in enumerate(lotes):
    X_lote = np.load(lote_path, allow_pickle=True)
    inicio = i * tamanho_lote
    fim = inicio + len(X_lote)
    indices_lote = np.arange(inicio, fim)
    mask = np.isin(indices_lote, idx_treino)
    if np.any(mask):
        corpus_treino.extend(X_lote[mask])
vectorizer.fit(corpus_treino)
mostrar_uso_ram("Ap√≥s ajustar vocabul√°rio")
del corpus_treino

# Calcula pesos das classes para sample_weight
classes = np.unique(y)
pesos_classes = compute_class_weight('balanced', classes=classes, y=y)
pesos_dict = dict(zip(classes, pesos_classes))
print("Pesos das classes:", pesos_dict)

# Treinamento incremental com sample_weight
print("üöÄ Iniciando treinamento incremental...")
clf_initialized = False

for i, lote_path in enumerate(lotes):
    print(f"\nüì¶ Treinando lote {i+1} / {len(lotes)}...")
    X_lote = np.load(lote_path, allow_pickle=True)
    inicio = i * tamanho_lote
    fim = inicio + len(X_lote)
    indices_lote = np.arange(inicio, fim)
    mask = np.isin(indices_lote, idx_treino)
    if not np.any(mask):
        print("   Nenhum dado de treino nesse lote, pulando.")
        continue
    X_batch = X_lote[mask]
    y_batch = y[indices_lote][mask]

    X_vec = vectorizer.transform(X_batch)

    sample_weight = np.array([pesos_dict[label] for label in y_batch])

    if not clf_initialized:
        clf.partial_fit(X_vec, y_batch, classes=classes, sample_weight=sample_weight)
        clf_initialized = True
    else:
        clf.partial_fit(X_vec, y_batch, sample_weight=sample_weight)

    mostrar_uso_ram(f"Ap√≥s treino do lote {i+1}")

    # Avalia√ß√£o parcial a cada 5 lotes
    if (i+1) % 5 == 0 or i == len(lotes)-1:
        print(f"üìä Avaliando modelo ap√≥s lote {i+1}...")
        X_teste = []
        y_teste = []
        for j, lote_teste_path in enumerate(lotes):
            X_teste_lote = np.load(lote_teste_path, allow_pickle=True)
            ini_teste = j * tamanho_lote
            fim_teste = ini_teste + len(X_teste_lote)
            indices_teste_lote = np.arange(ini_teste, fim_teste)
            mask_teste = np.isin(indices_teste_lote, idx_teste)
            if not np.any(mask_teste):
                continue
            X_teste.extend(X_teste_lote[mask_teste])
            y_teste.extend(y[indices_teste_lote][mask_teste])
        X_teste_vec = vectorizer.transform(X_teste)
        y_pred = clf.predict(X_teste_vec)
        print(classification_report(y_teste, y_pred, target_names=["Negative", "Neutral", "Positive"]))

print("\n‚úÖ Treinamento e avalia√ß√£o finalizados!")



import os
import numpy as np
import psutil
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
import glob

def mostrar_uso_ram(msg=""):
    ram = psutil.virtual_memory()
    print(f"[{msg}] RAM usada: {round((ram.total - ram.available) / (1024 ** 3), 2)} GB / {round(ram.total / (1024 ** 3), 2)} GB")

# Caminhos
caminho_lotes = '/content/lotes_limpos'
caminho_y = '/content/y_labels.npy'

if not os.path.exists(caminho_y):
    raise FileNotFoundError(f"O arquivo de r√≥tulos n√£o foi encontrado em: {caminho_y}")

print(" Carregando r√≥tulos...")
y = np.load(caminho_y)
mostrar_uso_ram("Ap√≥s carregar y")

# Lista lotes e embaralha para evitar vi√©s de ordem
lotes = sorted(glob.glob(os.path.join(caminho_lotes, '*.npy')))
np.random.shuffle(lotes)
print(f" Total de lotes encontrados: {len(lotes)}")

# Get the actual size of each batch
batch_sizes = [len(np.load(lote_path, allow_pickle=True)) for lote_path in lotes]
total_samples = sum(batch_sizes)

if total_samples != len(y):
     print(f"[WARNING] Total samples in y ({len(y)}) does not match sum of batch sizes ({total_samples}). Proceeding, but this might cause issues.")
     # Adjust total_samples to match the size of y for splitting
     total_samples = len(y)


# Separa √≠ndices globais treino/teste
indices = np.arange(total_samples)
idx_treino, idx_teste = train_test_split(indices, test_size=0.2, stratify=y, random_state=42)

print(f" Separa√ß√£o treino/teste: {len(idx_treino)} / {len(idx_teste)}")
mostrar_uso_ram("Ap√≥s separar treino/teste")

# Inicializa vetorizador TF-IDF (mais amplo)
vectorizer = TfidfVectorizer(
    lowercase=True,
    max_df=0.95,
    min_df=3,
    ngram_range=(1, 3),
    max_features=30000
)

# Inicializa classificador SGD with class_weight
clf = SGDClassifier(
    loss='modified_huber',
    class_weight='balanced',
    max_iter=5000,
    tol=1e-4,
    early_stopping=False,  # Changed to False
    random_state=42
)

# Ajuste do vocabul√°rio com todo o corpus de treino
print(" Ajustando vocabul√°rio do TF-IDF com todos os dados de treino...")
corpus_treino = []
global_idx_offset = 0
for i, lote_path in enumerate(lotes):
    X_lote = np.load(lote_path, allow_pickle=True)
    current_batch_size = len(X_lote)
    indices_lote_global = np.arange(global_idx_offset, global_idx_offset + current_batch_size)
    mask = np.isin(indices_lote_global, idx_treino)
    if np.any(mask):
        corpus_treino.extend(X_lote[mask])
    global_idx_offset += current_batch_size # Update offset after processing

vectorizer.fit(corpus_treino)
mostrar_uso_ram("Ap√≥s ajustar vocabul√°rio")
del corpus_treino

# Treinamento incremental con evaluaci√≥n a cada lote
print(" Iniciando treinamento incremental...")
classes = np.unique(y)
clf_initialized = False
global_idx_offset = 0 # Reset offset for training

for i, lote_path in enumerate(lotes):
    print(f"\n Treinando lote {i+1} / {len(lotes)}...")
    X_lote = np.load(lote_path, allow_pickle=True)
    current_batch_size = len(X_lote)
    indices_lote_global = np.arange(global_idx_offset, global_idx_offset + current_batch_size)

    mask_treino = np.isin(indices_lote_global, idx_treino)
    if not np.any(mask_treino):
        print("   Nenhum dado de treino nesse lote, pulando.")
        global_idx_offset += current_batch_size # Update offset even if skipping
        continue
    X_batch = X_lote[mask_treino]
    y_batch = y[indices_lote_global[mask_treino]]

    X_vec = vectorizer.transform(X_batch)

    if not clf_initialized:
        clf.partial_fit(X_vec, y_batch, classes=classes)
        clf_initialized = True
    else:
        clf.partial_fit(X_vec, y_batch)
    mostrar_uso_ram(f"Ap√≥s treino do lote {i+1}")
    global_idx_offset += current_batch_size # Update offset after processing


# Evaluaci√≥n
print("\n Preparando datos de teste para evaluaci√≥n...")
X_teste = []
y_teste = []
global_idx_offset = 0 # Reset offset for evaluation

for i, lote_path in enumerate(lotes):
    X_lote = np.load(lote_path, allow_pickle=True)
    current_batch_size = len(X_lote)
    indices_lote_global = np.arange(global_idx_offset, global_idx_offset + current_batch_size)

    mask_teste = np.isin(indices_lote_global, idx_teste)
    if not np.any(mask_teste):
        global_idx_offset += current_batch_size
        continue
    X_teste.extend(X_lote[mask_teste])
    y_teste.extend(y[indices_lote_global[mask_teste]])

    global_idx_offset += current_batch_size # Update offset after processing


mostrar_uso_ram("Ap√≥s preparar dados de teste")

print(" Avaliando modelo final...")
X_teste_vec = vectorizer.transform(X_teste)
y_pred = clf.predict(X_teste_vec)

print(classification_report(y_teste, y_pred, target_names=["Negative", "Neutral", "Positive"]))